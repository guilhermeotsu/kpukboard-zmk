/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "zmk-helpers/helper.h"

#define DEF 0
#define SYM 1
#define NUM 2
#define NAV 3
#define FUN 4

#include "combos.dtsi"


// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
// &lt { quick_tap_ms = <-1>; };

/ {
    behaviors {
        ht: hold_tap_mods_standard {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_PREF";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hm: home_row_tap_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_TAP_PREF";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp ESC &kp Q       &kp W        &kp E          &kp R           &kp T           &kp Y      &kp U          &kp I            &kp O          &kp P          &kp DEL
            &key_repeat &hm LGUI A  &hm LALT S   &hm LCTRL D    &hm LSHFT F     &kp G           &kp H      &hm LSHFT J    &hm LCTRL K      &hm LALT L     &hm LGUI SEMI  &kp SQT
                        &kp Z       &kp X        &kp C          &kp V           &kp B           &kp N      &kp M          &kp COMMA        &kp DOT        &lt FUN FSLH
                                                                &kp SPACE   &lt NAV TAB     &lt SYM ENTER  &lt NUM BKSP
                >;
        };

        sym_layer {
            bindings = <
                &trans &trans       &kp AMPS       &kp ASTRK   &kp LPAR    &kp RPAR      &trans    &kp LBKT  &kp RBKT           &trans           &trans     &trans
                &trans &trans       &kp DLLR       &kp PRCNT   &kp CARET   &kp EQL       &trans    &kp LPAR  &kp RPAR           &trans           &trans     &trans
                       &kp TILDE    &kp EXCL       &kp AT      &kp HASH    &kp PIPE      &trans    &kp LBRC  &kp RBRC           &trans           &trans
                                                               &trans      &kp UNDER     &trans    &trans
            >;
        };

        num_layer {
            bindings = <
                &trans &trans    &kp N7    &kp N8   &kp N9    &trans           &trans     &trans       &trans       &trans        &trans     &trans
                &trans &trans    &kp N4    &kp N5   &kp N6    &kp PLUS         &trans     &kp LSHFT    &kp LCTRL    &kp LALT     &kp LGUI     &trans
                       &kp GRAVE &kp N1    &kp N2   &kp N3    &kp BSLH         &trans     &trans       &trans       &trans        &trans
                                                    &kp N0    &kp MINUS        &trans     &trans
            >;
        };

        nav_layer {
            bindings = <
                &trans &trans    &trans    &trans        &trans        &trans          &trans           &kp HOME     &kp END      &trans      &trans     &trans
                &trans &kp LGUI  &kp LALT  &kp LCTRL     &kp LSHFT     &trans          &kp LEFT         &kp DOWN     &kp UP       &kp RIGHT   &trans     &trans
                       &trans    &kp LA(N1) &kp LA(N2)   &kp LA(N3)    &kp LA(N4)      &trans           &trans       &trans       &trans      &trans
                                                           &trans &trans               &trans &kp DEL
            >;
        };

        fn_layer {
            bindings = <
                &trans &bt BT_SEL 0  &kp F7  &kp F8  &kp F9   &kp F12          &kp C_VOL_UP    &trans      &trans     &trans      &trans   &trans
                &trans &bt BT_SEL 1  &kp F4  &kp F5  &kp F6   &kp F11          &kp C_VOL_DN    &kp LCTRL   &kp LSHFT  &kp LALT    &kp LGUI &trans
                       &bt BT_CLR    &kp F1  &kp F2  &kp F3   &kp F10          &kp C_MUTE      &kp C_PREV  &kp C_PP   &kp C_NEXT  &trans
                                                        &trans &trans          &trans &trans
            >;
        };

    };
};
