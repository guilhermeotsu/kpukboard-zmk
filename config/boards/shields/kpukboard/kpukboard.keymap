/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>
#include "zmk-helpers/helper.h"
#include <behaviors/rgbled_widget.dtsi>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10


#define DEF 0
#define SYM 1
#define NUM 2
#define NAV 3
#define FUN 4
#define MOUSE 5
#define LOL 6

#include "combos.dtsi"

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
// &lt { quick_tap_ms = <-1>; };

/ {
    behaviors {
        ht: hold_tap_mods_standard {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_PREF";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hm: home_row_tap_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_TAP_PREF";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

       swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "TRI-STATE";
            #binding-cells = <0>;
            ignored-key-positions = <1 13 16>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp TAB &kp Q       &kp W        &kp E          &kp R           &kp T           &kp Y      &kp U          &kp I            &kp O          &kp P         &kp BKSP
            &key_repeat &hm LGUI A  &hm LALT S   &hm LCTRL D    &hm LSHFT F     &kp G           &kp H      &hm LSHFT J    &hm LCTRL K      &hm LALT L     &hm LGUI SQT  &kp SQT
                        &kp Z       &kp X        &kp C          &kp V           &kp B           &kp N      &kp M          &kp COMMA        &kp DOT        &lt FUN FSLH
                                                                &lt MOUSE ESC   &lt NAV SPACE   &lt NUM ENTER  &lt SYM BKSP
                >;
        };

        sym_layer {
            bindings = <
                &trans &trans       &kp AMPS   &kp ASTRK   &kp LPAR    &kp RPAR      &trans    &kp LBKT  &kp RBKT    &trans     &trans     &trans
                &trans &kp SEMI     &kp DLLR   &kp PRCNT   &kp CARET   &kp PLUS      &trans    &kp LPAR  &kp RPAR    &trans     &trans     &trans
                       &kp TILDE    &kp EXCL   &kp AT      &kp HASH    &kp BSLH      &trans    &kp LBRC  &kp RBRC    &trans     &trans
                                                           &trans      &kp UNDER     &trans    &trans
            >;
        };

        num_layer {
            bindings = <
                &trans &kp LPAR  &kp N7    &kp N8   &kp N9    &kp RPAR         &trans     &kp LBKT  &kp RBKT    &trans       &trans     &trans
                &trans &kp COLON &kp N4    &kp N5   &kp N6    &kp EQL          &trans     &kp LSHFT &kp LCTRL   &kp LALT     &kp LGUI   &trans
                       &kp GRAVE &kp N1    &kp N2   &kp N3    &kp PIPE         &trans     &kp LBRC  &kp RBRC    &trans       &trans
                                                    &kp N0    &kp MINUS        &trans     &trans
            >;
        };

        nav_layer {
            bindings = <
                &swapper      &kp LS(TAB)  &kp LA(N4) &kp LA(N5)   &kp LA(N6)    &trans          &trans       &kp HOME    &kp END   &trans      &trans     &trans
                &kp LS(TAB)   &kp LGUI     &kp LALT   &kp LCTRL    &kp LSHFT     &trans          &kp LEFT     &kp DOWN    &kp UP    &kp RIGHT   &trans     &trans
                              &trans       &kp LA(N1) &kp LA(N2)   &kp LA(N3)    &trans          &trans       &kp HOME    &kp END   &trans      &trans
                                                                    &trans       &trans          &trans       &kp DEL
            >;
        };

        fn_layer {
            bindings = <
                &bt BT_SEL 4 &kp F12  &kp F7  &kp F8  &kp F9  &bt BT_SEL 2        &kp C_VOL_UP    &trans      &trans     &trans      &trans   &trans
                &bt BT_SEL 3 &kp F11  &kp F4  &kp F5  &kp F6  &bt BT_SEL 1        &kp C_VOL_DN    &kp LCTRL   &kp LSHFT  &kp LALT    &kp LGUI &trans
                             &kp F10  &kp F1  &kp F2  &kp F3  &bt BT_SEL 0        &kp C_MUTE      &kp C_PREV  &kp C_PP   &kp C_NEXT  &trans
                                                      &trans  &trans              &trans          &trans
            >;
        };

        mouse_layer {
            bindings = <
                &ind_bat &trans  &trans          &msc SCRL_UP    &trans           &trans                 &trans           &mkp MB4         &mkp MCLK       &mkp MB5         &trans   &trans
                &ind_con &trans  &msc SCRL_RIGHT &msc SCRL_DOWN  &msc SCRL_LEFT   &trans                 &mmv MOVE_LEFT   &mmv MOVE_DOWN   &mmv MOVE_UP    &mmv MOVE_RIGHT  &trans   &trans
                         &trans  &trans          &trans          &trans           &trans                 &trans           &trans           &trans          &trans           &trans
                                                                 &trans           &trans                 &mkp LCLK        &mkp RCLK
            >;
        };

        lol_layer {
            bindings = <
                &kp B  &kp ESC    &kp N1      &kp N2          &kp N3          &kp N4                 &trans       &trans    &trans     &trans   &trans   &trans
                &kp T  &kp LSHFT  &kp Q       &kp W           &kp E           &kp R                  &trans       &trans    &trans     &trans   &trans   &trans
                       &kp LCTRL  &kp A       &kp S           &kp D           &kp F                  &trans       &trans    &trans     &trans   &tog LOL
                                                              &kp TAB         &kp SPACE              &tog LOL     &swapper
            >;
        };
    };
};
